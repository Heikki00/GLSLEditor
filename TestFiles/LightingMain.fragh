#include "Lighting.glh"
#include "Sampling.glh"

in vec2 texCoord0;htrshtsrhsrhhtrshrsh
in vec3 normal0;
in vec3 worldPos0;
in mat3 tbnMatrix;
in vec4 shandowMapCoords0;
out vec4 finalColor;

uniform sampler2D diffuse;
uniform sampler2D normalMap;
uniform sampler2D dispMap;

uniform float dispMapScale;
uniform float dispMapBias;

uniform sampler2D R_shandowMap;
uniform float R_shandowVarianceMin;
uniform float R_shandowLightBleedResuction;

float calcShandowAmount(sampler2D shandowMap, vec4 initialShandowMapCoords){

	vec3 shandowMapCoords = (initialShandowMapCoords.xyz / initialShandowMapCoords.w);
	
	return sampleVarianceShandowMap(shandowMap, shandowMapCoords.xy, shandowMapCoords.z, R_shandowVarianceMin, R_shandowLightBleedResuction);
	
}


void main(){



vec2 texCoord = calcParallaxTexCoords(dispMap, tbnMatrix, normalize(C_eyePos - worldPos0), texCoord0, dispMapScale, dispMapBias);



vec3 n = normalize(tbnMatrix * (255.0/128.0 * texture(normalMap, texCoord).xyz - 1)); 


vec4 lightAmt = calcLightingEffect(n, worldPos0);// * calcShandowAmount(R_shandowMap, shandowMapCoords0);
	
	

finalColor = texture(diffuse, texCoord) *  lightAmt;



}
