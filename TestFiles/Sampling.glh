

vec2 calcParallaxTexCoords(sampler2D dispMap, mat3 tbnMatrix, vec3 dirToEye, vec2 texCoord, float dispMapScale, float dispMapBias){

return texCoord + (dirToEye * tbnMatrix).xy * (texture(dispMap, texCoord.xy).r * dispMapScale + dispMapBias);




}

float sampleShandowMap(sampler2D shandowMap, vec2 coords, float compare){
	
	return step(compare, texture(shandowMap, coords).r);
	
}

float sampleShandowMapLinear(sampler2D shandowMap, vec2 coords, float compare, vec2 texelSize){

	vec2 pixelPos = coords / texelSize + vec2(0.5);
	vec2 fractPart = fract(pixelPos);
	vec2 startTexel = (pixelPos - fractPart) * texelSize;

	float blTexel = sampleShandowMap(shandowMap, startTexel, compare);
	float brTexel = sampleShandowMap(shandowMap, startTexel + vec2(texelSize.x, 0.0), compare);
	float tlTexel = sampleShandowMap(shandowMap, startTexel + vec2(0.0, texelSize.y), compare);	
	float trTexel = sampleShandowMap(shandowMap, startTexel + texelSize, compare);

	float mixA = mix(blTexel, tlTexel, fractPart.y);
	float mixB = mix(brTexel, trTexel, fractPart.y);
	
	return mix(mixA, mixB, fractPart.x);
}



float sampleShandowMapPCF(sampler2D shandowMap, vec2 coords, float compare, vec2 texelSize){
	
	const float NUM_SAMPLES = 5.0;
	const float SAMPLES_START = (NUM_SAMPLES - 1.0)/2.0;
	const float NUM_SAMPLES_SQUARED = NUM_SAMPLES * NUM_SAMPLES;
	
	float result = 0.0;

	for(float y = -SAMPLES_START; y <=SAMPLES_START; y+=1.0){

		for(float x = -SAMPLES_START; x <= SAMPLES_START; x+=1.0){
			vec2 coordOffset = vec2(x,y) * texelSize;
			result += sampleShandowMapLinear(shandowMap, coords + coordOffset, compare, texelSize);
		
		}

	}

	return result/NUM_SAMPLES_SQUARED;

}

float linstep(float low, float high, float v){

	return clamp((v - low)/(high - low), 0.0, 1.0);

}


float sampleVarianceShandowMap(sampler2D shandowMap, vec2 coords, float compare, float varianceMin, float lightBleedReductionAmount){


	vec2 moments = texture(shandowMap, coords).xy;

	float p = step(compare, moments.x);
	float variance = max(moments.y - moments.x * moments.x, varianceMin);
	
	float d = compare - moments.x;
	float pMax = linstep(lightBleedReductionAmount, 1.0, variance / (variance + d * d));
	
	
	
	return min(max(p, pMax), 1.0);
	
}












